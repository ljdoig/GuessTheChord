module Test where

import Data.Maybe (fromJust)
import Main
import Proj2

testFeedback :: Bool
testFeedback = answers == zipWith feedback (parse targets) (parse guesses)
  where
    parse = map toChord
    targets =
      [ "A1 B2 A3",
        "A1 B2 C3",
        "A1 B1 C1",
        "A3 B2 C1",
        "A1 A3 B3",
        "C2 A2 B3",
        "A1 B1 G2"
      ]
    guesses =
      [ "A1 A2 B1",
        "A1 A2 A3",
        "A2 D1 E1",
        "C3 A2 B1",
        "C2 A2 B3",
        "A1 A3 B3",
        "D1 E1 F1"
      ]
    answers =
      [ (1, 2, 1),
        (1, 0, 2),
        (0, 1, 2),
        (0, 3, 3),
        (1, 1, 0),
        (1, 1, 0),
        (0, 0, 2)
      ]

loopQuick :: [Pitch] -> [Pitch] -> GameState -> Int -> IO Int
loopQuick target guess other guesses = do
  let answer = feedback target guess
  if answer == (3, 0, 0)
    then do
      putStrLn $ show guesses ++ " guesses"
      return guesses
    else do
      let (guess', other') = nextGuess (guess, other) answer
      loopQuick target guess' other' (guesses + 1)

guessQuick :: Chord -> IO Int
guessQuick target = do
  let (guess, other) = initialGuess
  loopQuick target guess other 1

guessTestsQuick :: Int -> [Chord] -> IO [Int]
guessTestsQuick _ [] = return []
guessTestsQuick i (x : xs) =
  do
    putStr (show i ++ ": ")
    guess <- guessQuick x
    rest <- guessTestsQuick (i + 1) xs
    return (guess : rest)

run :: IO ()
run = do
  guesses <- guessTestsQuick 0 targets
  print guesses
  putStrLn ("Average: " ++ show (fromIntegral (sum guesses) / fromIntegral (length guesses)))

guessTests :: [Chord] -> IO ()
guessTests = foldr ((>>) . guessTest) (return ())

runLong :: IO ()
runLong = guessTests targets

targets :: [Chord]
targets = allChords

allSumOfSquaresOfCounts = [5, 4, 4, 3, 7, 4, 3, 4, 3, 4, 6, 4, 3, 5, 4, 3, 5, 5, 4, 3, 4, 6, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 4, 6, 5, 5, 5, 6, 5, 4, 4, 3, 3, 5, 5, 5, 3, 4, 4, 4, 6, 5, 5, 5, 5, 5, 4, 5, 5, 4, 5, 5, 6, 4, 5, 4, 4, 6, 5, 5, 5, 4, 5, 5, 6, 4, 5, 5, 5, 6, 4, 6, 4, 5, 6, 4, 5, 4, 6, 5, 5, 5, 4, 5, 5, 5, 6, 4, 4, 5, 4, 5, 5, 4, 3, 3, 5, 3, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 4, 6, 5, 6, 5, 6, 5, 5, 5, 6, 5, 5, 5, 5, 4, 5, 4, 4, 4, 6, 4, 6, 5, 5, 5, 6, 5, 5, 6, 6, 5, 5, 5, 6, 5, 7, 5, 6, 5, 4, 6, 6, 7, 7, 5, 4, 5, 4, 4, 4, 5, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 6, 6, 2, 4, 5, 4, 4, 4, 5, 4, 5, 4, 4, 5, 5, 4, 4, 5, 4, 4, 4, 3, 3, 4, 5, 3, 4, 5, 4, 4, 3, 4, 3, 4, 5, 4, 3, 4, 4, 5, 5, 4, 4, 4, 4, 4, 3, 5, 5, 4, 4, 5, 4, 4, 3, 5, 4, 4, 5, 4, 4, 6, 5, 4, 3, 5, 3, 4, 3, 4, 4, 4, 5, 4, 4, 4, 5, 6, 4, 4, 5, 4, 3, 5, 3, 4, 4, 4, 5, 4, 5, 3, 5, 3, 4, 4, 4, 4, 5, 5, 4, 5, 4, 5, 5, 5, 5, 3, 3, 4, 4, 5, 5, 5, 4, 5, 5, 4, 5, 4, 4, 5, 4, 3, 5, 4, 5, 5, 5, 4, 5, 5, 3, 5, 4, 5, 5, 4, 4, 5, 5, 4, 6, 5, 5, 3, 5, 5, 3, 6, 6, 5, 3, 5, 5, 4, 4, 4, 5, 4, 5, 5, 4, 3, 5, 5, 4, 4, 4, 5, 6, 5, 5, 5, 4, 2, 5, 3, 4, 3, 4, 4, 4, 3, 2, 5, 4, 4, 3, 4, 5, 3, 6, 3, 5, 4, 4, 3, 3, 4, 5, 4, 4, 4, 3, 4, 3, 6, 3, 5, 3, 4, 4, 3, 4, 4, 5, 3, 4, 3, 4, 5, 5, 4, 3, 4, 4, 4, 5, 3, 4, 3, 4, 4, 4, 5, 4, 4, 5, 5, 4, 4, 5, 4, 4, 5, 5, 5, 5, 4, 5, 3, 3, 4, 4, 4, 4, 5, 4, 4, 4, 5, 4, 5, 5, 4, 5, 5, 5, 4, 4, 4, 3, 3, 4, 4, 5, 4, 4, 4, 5, 4, 4, 6, 5, 5, 4, 4, 4, 4, 4, 5, 5, 4, 3, 5, 5, 4, 5, 5, 5, 4, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 4, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 3, 4, 5, 5, 5, 4, 4, 5, 4, 2, 6, 5, 3, 4, 4, 3, 3, 5, 3, 2, 4, 3, 3, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 2, 4, 5, 3, 3, 5, 5, 5, 4, 4, 5, 4, 5, 5, 5, 3, 4, 4, 3, 3, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 2, 3, 3, 5, 4, 5, 3, 3, 4, 4, 4, 4, 3, 5, 4, 6, 4, 6, 4, 4, 5, 6, 4, 5, 4, 3, 5, 3, 4, 4, 4, 5, 4, 3, 3, 5, 4, 3, 5, 3, 3, 4, 3, 3, 3, 5, 5, 4, 3, 4, 3, 3, 4, 4, 3, 3, 4, 4, 4, 4, 4, 5, 5, 2, 5, 4, 4, 3, 3, 4, 3, 5, 4, 3, 3, 3, 4, 3, 5, 4, 3, 4, 4, 3, 3, 6, 5, 3, 3, 4, 3, 4, 3, 5, 4, 5, 5, 6, 4, 4, 5, 4, 5, 6, 5, 4, 4, 4, 4, 5, 6, 5, 4, 4, 4, 5, 4, 5, 4, 3, 3, 5, 5, 4, 4, 5, 3, 4, 5, 3, 4, 4, 4, 5, 5, 4, 3, 4, 3, 4, 5, 4, 4, 5, 4, 4, 4, 3, 5, 4, 4, 5, 4, 4, 3, 6, 5, 5, 4, 4, 3, 4, 5, 4, 5, 4, 5, 5, 5, 5, 3, 4, 4, 4, 5, 3, 4, 4, 3, 4, 5, 4, 3, 6, 5, 3, 4, 2, 4, 3, 6, 5, 3, 4, 2, 3, 4, 5, 4, 4, 6, 4, 6, 5, 5, 5, 5, 6, 4, 5, 5, 4, 5, 3, 5, 5, 5, 4, 4, 5, 4, 4, 3, 4, 4, 3, 5, 4, 4, 3, 4, 5, 3, 2, 4, 3, 5, 3, 3, 4, 3, 3, 3, 3, 3, 5, 4, 3, 4, 3, 4, 2, 4, 5, 5, 3, 5, 3, 5, 3, 6, 5, 4, 4, 3, 4, 4, 4, 5, 4, 5, 4, 5, 4, 3, 4, 3, 4, 3, 3, 5, 3, 3, 4, 4, 4, 3, 4, 5, 5, 4, 5, 5, 4, 5, 4, 5, 4, 6, 5, 4, 4, 5, 4, 4, 3, 3, 5, 5, 5, 5, 4, 4, 4, 3, 3, 4, 5, 3, 5, 4, 4, 3, 4, 4, 4, 4, 5, 5, 4, 5, 4, 4, 5, 3, 3, 6, 5, 3, 4, 3, 3, 4, 3, 6, 5, 4, 2, 2, 4, 3, 4, 4, 4, 4, 3, 3, 5, 3, 5, 5, 6, 6, 5, 3, 3, 5, 5, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 4, 3, 5, 3, 3, 5, 4, 3, 5, 5, 4, 3, 4, 5, 4, 5, 5, 4, 4, 5, 5, 4, 5, 5, 4, 3, 4, 4, 4, 5, 5, 6, 5, 5, 5, 4, 5, 4, 4, 5, 5, 5, 5, 4, 5, 4, 6, 5, 5, 5, 4, 4, 5, 6, 6, 4, 5, 3, 3, 5, 5, 5, 3, 4, 4, 4, 4, 4, 6, 6, 5, 5, 5, 4, 7, 6, 5, 3, 4, 4, 3, 5, 5, 4, 4, 5, 4, 5, 3, 3, 3, 3, 4, 3, 4, 4, 4, 6, 4, 4, 3, 4, 5, 3, 4, 4, 4, 4, 3, 4, 4, 3, 5, 4, 4, 3, 5, 4, 3, 5, 5, 4, 5, 4, 4, 3, 3, 3, 5, 5, 5, 5, 4, 4, 6, 3, 4, 4, 4, 4, 6, 5, 4, 4, 3, 3, 3, 2, 5, 4, 5, 2, 4, 3, 3, 4, 4, 5, 3, 4, 3, 3, 3, 4, 4, 4, 3, 4, 5, 3, 4, 5, 6, 4, 4, 4, 5, 3, 4, 3, 4, 4, 4, 4, 3, 5, 3, 3, 4, 6, 5, 4, 3, 3, 3, 5, 4, 3, 4, 4, 4, 4, 5, 4, 5, 3, 4, 3, 5, 3, 2, 4, 2, 3, 3, 6, 3, 3, 5, 4, 2, 4, 5, 4, 4, 5, 5, 5, 2, 5, 5, 4, 3, 4, 5, 2, 2, 5, 4, 4, 2, 3, 4, 3, 5, 4, 3, 3, 3, 4, 3, 6, 5, 4, 4, 3, 3, 3, 4, 5, 4, 4, 5, 5, 5, 5, 5, 4, 4, 5, 5, 3, 3, 4, 3, 4, 4, 3, 3, 6, 5, 4, 3, 2, 3, 3, 3, 4, 4, 5, 4, 5, 4, 3, 4, 4, 4, 4, 3, 4, 3, 2, 4, 2, 3, 2, 4, 4, 4, 5, 6, 6, 4, 4, 3, 5, 5, 4, 4, 4, 4, 4, 4, 3, 4, 1, 5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 3, 4, 4, 3]

avgSumOfSquaresOfCounts = 4.209022556390978
