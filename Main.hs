--  Author   : Peter Schachte
--  Purpose  : Test program
--  Copyright: (c) 2020 The University of Melbourne

-- TESTING CODE.  DO NOT EDIT.

module Main where

import Data.List
import Data.Maybe
import Proj2
import System.Environment
import System.Random

-- | Guess the given target()ounting and showing the guesses.
guessTest :: [Pitch] -> IO Int
guessTest target = do
  let (guess, other) = initialGuess
  loop target guess other 1

-- | Given a target and guess and a guess number, continue guessing
-- until the right target is guessed.()
loop :: [Pitch] -> [Pitch] -> GameState -> Int -> IO Int
loop target guess other guesses = do
  putStrLn $ "Your guess #" ++ show guesses ++ ":  " ++ show guess
  let answer = feedback target guess
  putStrLn $ "    My answer:  " ++ show answer
  if answer == (3, 0, 0)
    then do
      putStrLn $ "You got it in " ++ show guesses ++ " guesses!"
      return guesses
    else do
      let (guess', other') = nextGuess (guess, other) answer
      loop target guess' other' (guesses + 1)

-- | Parse a string containing a number of space-separated pitches to produce
-- a list of pitches.  Error if any of the pitches can't be parsed.
toChord :: String -> [Pitch]
toChord = fromJust . mapM toPitch . words

-- | Prompt for a target and use guessTest to try to guess it.
-- main :: IO ()
-- main = do
--   putStr "Target chord (3 pitches separated by spaces): "
--   text <- getLine
--   guessTest $ toChord text

--------------------------------------------------------------------------------

testFeedback :: Bool
testFeedback = answers == zipWith feedback (parse targets) (parse guesses)
  where
    parse = map toChord
    targets =
      [ "A1 B2 A3",
        "A1 B2 C3",
        "A1 B1 C1",
        "A3 B2 C1",
        "A1 A3 B3",
        "C2 A2 B3",
        "A1 B1 G2"
      ]
    guesses =
      [ "A1 A2 B1",
        "A1 A2 A3",
        "A2 D1 E1",
        "C3 A2 B1",
        "C2 A2 B3",
        "A1 A3 B3",
        "D1 E1 F1"
      ]
    answers =
      [ (1, 2, 1),
        (1, 0, 2),
        (0, 1, 2),
        (0, 3, 3),
        (1, 1, 0),
        (1, 1, 0),
        (0, 0, 2)
      ]

loopQuick :: [Pitch] -> [Pitch] -> GameState -> Int -> IO Int
loopQuick target guess other guesses = do
  let answer = feedback target guess
  if answer == (3, 0, 0)
    then do
      --putStrLn $ show guesses ++ " guesses"
      return guesses
    else do
      let (guess', other') = nextGuess (guess, other) answer
      loopQuick target guess' other' (guesses + 1)

guessQuick :: Chord -> IO Int
guessQuick target = do
  let (guess, other) = initialGuess
  loopQuick target guess other 1

guessTestsQuick :: Int -> [Chord] -> IO [Int]
guessTestsQuick _ [] = return []
guessTestsQuick i (x : xs) =
  do
    --putStr (show i ++ ": ")
    guess <- guessQuick x
    rest <- guessTestsQuick (i + 1) xs
    return (guess : rest)

main2 :: IO ()
main2 = do
  guesses <- guessTestsQuick 0 targets
  print guesses
  let average = fromIntegral (sum guesses) / fromIntegral (length guesses)
  putStrLn (if average > 4.3 then show average ++ "*" else show average)

guessTests :: [Chord] -> IO [Int]
guessTests [] = return []
guessTests (x : xs) =
  do
    guess <- guessTest x
    rest <- guessTests xs
    return (guess : rest)

runLong :: IO [Int]
runLong = guessTests targets

targets :: [Chord]
targets = allChords

allSumOfSquaresOfCounts = [2, 3, 2, 4, 5, 3, 4, 3, 5, 3, 4, 3, 4, 5, 2, 3, 3, 4, 4, 4, 3, 3, 4, 4, 3, 5, 4, 4, 4, 3, 4, 3, 4, 3, 3, 5, 3, 4, 5, 4, 3, 3, 4, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 2, 4, 3, 3, 4, 5, 6, 3, 3, 4, 2, 3, 5, 5, 3, 4, 5, 5, 4, 5, 5, 3, 4, 3, 4, 4, 4, 5, 4, 5, 3, 5, 5, 5, 5, 4, 4, 5, 5, 5, 4, 6, 2, 5, 5, 4, 4, 3, 4, 4, 4, 4, 5, 3, 4, 3, 4, 4, 3, 3, 3, 4, 2, 4, 5, 3, 3, 3, 3, 3, 5, 3, 3, 3, 4, 3, 4, 4, 4, 4, 5, 5, 5, 5, 4, 5, 4, 4, 5, 4, 4, 3, 3, 5, 3, 4, 4, 6, 3, 3, 3, 4, 4, 3, 5, 3, 5, 4, 4, 3, 4, 4, 3, 3, 5, 4, 4, 3, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 5, 5, 5, 3, 4, 4, 5, 5, 6, 5, 4, 5, 4, 4, 3, 4, 3, 4, 4, 5, 5, 3, 5, 3, 5, 6, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 5, 5, 4, 4, 4, 3, 3, 4, 4, 3, 5, 6, 3, 3, 3, 5, 4, 4, 5, 3, 3, 5, 4, 4, 3, 5, 3, 6, 3, 3, 4, 4, 4, 3, 5, 3, 5, 4, 5, 5, 3, 3, 5, 4, 4, 4, 5, 3, 4, 5, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 5, 5, 4, 5, 4, 5, 5, 5, 3, 4, 3, 4, 4, 4, 4, 4, 5, 4, 5, 4, 4, 4, 4, 5, 4, 5, 4, 4, 3, 3, 3, 3, 4, 5, 6, 3, 3, 3, 4, 5, 5, 5, 4, 5, 4, 4, 5, 5, 4, 3, 3, 6, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 4, 5, 5, 5, 5, 4, 4, 4, 3, 4, 4, 7, 3, 4, 3, 4, 3, 4, 4, 4, 3, 3, 4, 5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 4, 4, 3, 4, 5, 6, 3, 4, 4, 4, 5, 5, 4, 4, 4, 5, 4, 5, 5, 4, 3, 4, 5, 4, 5, 4, 5, 3, 4, 4, 4, 5, 5, 4, 5, 4, 4, 5, 3, 4, 3, 4, 5, 4, 5, 3, 4, 5, 4, 4, 3, 4, 5, 4, 3, 4, 4, 5, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 4, 5, 4, 5, 5, 5, 4, 3, 3, 3, 5, 4, 5, 3, 3, 3, 4, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 3, 5, 4, 5, 4, 4, 5, 3, 4, 5, 4, 4, 4, 5, 5, 5, 5, 3, 3, 5, 5, 5, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 4, 5, 4, 5, 5, 4, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 4, 5, 4, 5, 4, 6, 5, 4, 5, 4, 6, 4, 6, 5, 5, 5, 4, 5, 4, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 5, 5, 6, 5, 6, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 3, 5, 3, 3, 5, 5, 4, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 4, 4, 4, 5, 4, 5, 5, 5, 4, 5, 5, 5, 4, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 2, 4, 4, 4, 5, 4, 6, 3, 3, 3, 4, 5, 6, 6, 3, 4, 4, 4, 5, 6, 2, 4, 5, 4, 4, 5, 6, 2, 6, 4, 4, 4, 4, 2, 3, 4, 4, 3, 5, 6, 4, 3, 5, 4, 5, 3, 4, 3, 4, 4, 5, 7, 3, 3, 4, 5, 4, 4, 4, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 5, 6, 5, 5, 5, 6, 6, 3, 4, 3, 4, 5, 6, 6, 2, 4, 3, 4, 5, 6, 2, 6, 3, 3, 4, 5, 3, 3, 4, 5, 5, 3, 3, 5, 4, 4, 4, 5, 5, 5, 6, 6, 2, 4, 4, 4, 5, 3, 6, 3, 4, 4, 4, 5, 3, 4, 6, 4, 4, 5, 4, 5, 4, 5, 4, 5, 4, 3, 5, 5, 5, 5, 3, 6, 4, 4, 5, 5, 5, 3, 6, 4, 5, 4, 4, 4, 4, 5, 5, 5, 4, 5, 4, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 6, 3, 4, 3, 4, 5, 4, 7, 3, 6, 4, 6, 5, 5, 6, 5, 6, 4, 5, 4, 5, 3, 6, 6, 4, 5, 4, 3, 5, 4, 4, 4, 3, 5, 3, 4, 4, 4, 4, 5, 5, 5, 7, 3, 6, 5, 5, 5, 4, 4, 5, 4, 5, 4, 5, 4, 4, 6, 5, 5, 3, 3, 6, 4, 5, 6, 5, 4, 3, 5, 5, 4, 4, 4, 5, 4, 5, 4, 4, 4, 5, 5, 5, 5, 6, 4, 5, 5, 5, 5, 5, 3, 4, 2, 3, 4, 5, 4, 3, 6, 3, 5, 4, 4, 5, 3, 6, 6, 6, 5, 5, 5, 7, 7, 4, 4, 5, 4, 5, 5, 5, 4, 5, 3, 3, 6, 5, 4, 4, 5, 5, 5, 5, 3, 6, 6, 3, 3, 3, 4, 4, 4, 5, 2, 3, 2, 5, 4, 4, 3, 3, 4, 4, 3, 4, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 3, 4, 2, 3, 5, 5, 2, 4, 4, 4, 5, 5, 5, 3, 5, 4, 4, 3, 3, 5, 2, 4, 6, 4, 5, 4, 4, 4, 4, 2, 4, 2, 5, 2, 5, 4, 4, 3, 5, 4, 5, 2, 4, 3, 5, 5, 5, 4, 4, 4, 5, 5, 5, 5, 3, 5, 4, 4, 4, 4, 5, 5, 4, 4, 4, 3, 3, 3, 4, 4, 4, 5, 3, 3, 3, 3, 5, 4, 4, 3, 5, 4, 4, 5, 5, 5, 3, 3, 6, 4, 3, 3, 3, 3, 3, 4, 4, 4, 5, 4, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 5, 3, 4, 3, 4, 5, 3, 4, 4, 4, 4, 4, 3, 4, 4, 3, 5, 4, 4, 4, 5, 6, 4, 3, 4, 4, 4, 3, 4, 4, 3, 4, 4, 5, 4, 5, 4, 4, 4, 4, 5, 4, 3, 5, 4, 5, 5, 5, 4, 3, 3, 3, 4, 4, 4, 5, 5, 4, 5, 4, 5, 5, 5, 5, 5, 4, 6, 4, 5, 5, 4, 5, 5, 4, 4, 5, 5, 5, 5, 4, 4, 3, 4, 4, 4, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 3, 3, 3, 4, 5, 3, 6, 3, 4, 3, 4, 5, 6, 3, 6, 4, 3, 4, 5, 2, 2, 4, 4, 6, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 4, 2, 4, 3, 4, 5, 4, 6, 6, 5, 5, 4, 3, 5, 4, 5, 5, 3, 6, 3, 4, 4, 4, 4, 5, 5, 5, 7, 3, 6, 4, 5, 4, 3, 4, 5, 6, 6, 3, 5, 5, 5, 4, 4, 4, 5, 5, 4, 1, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 3]

avgSumOfSquaresOfCounts = 4.2105263157894735

allMaxOfCounts = [2, 3, 2, 4, 5, 3, 4, 3, 5, 3, 4, 3, 4, 5, 2, 3, 3, 4, 4, 4, 3, 3, 4, 4, 3, 5, 3, 4, 4, 3, 4, 3, 4, 3, 3, 5, 3, 4, 5, 4, 3, 4, 4, 4, 5, 4, 4, 4, 4, 4, 3, 4, 4, 4, 2, 4, 3, 3, 4, 5, 6, 3, 3, 4, 2, 3, 5, 5, 3, 4, 5, 5, 4, 5, 5, 3, 4, 3, 4, 4, 4, 5, 4, 5, 3, 5, 5, 5, 5, 4, 4, 5, 5, 5, 4, 6, 2, 5, 5, 4, 4, 3, 4, 4, 4, 5, 4, 5, 4, 3, 4, 3, 3, 3, 3, 4, 2, 4, 5, 2, 3, 3, 3, 3, 5, 3, 3, 3, 4, 3, 4, 3, 4, 3, 4, 5, 5, 5, 5, 4, 4, 3, 5, 4, 5, 3, 3, 4, 4, 3, 5, 6, 3, 3, 3, 5, 5, 5, 4, 3, 5, 4, 4, 3, 4, 5, 3, 3, 6, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 3, 3, 3, 3, 5, 5, 5, 3, 4, 3, 5, 5, 6, 5, 4, 4, 5, 5, 3, 4, 3, 4, 4, 5, 5, 3, 5, 3, 5, 6, 4, 4, 4, 5, 5, 4, 4, 4, 4, 4, 5, 5, 4, 4, 4, 3, 3, 4, 4, 3, 5, 6, 3, 3, 3, 5, 4, 4, 5, 3, 3, 5, 4, 4, 3, 5, 3, 6, 3, 3, 4, 4, 4, 3, 5, 3, 5, 4, 5, 5, 3, 3, 5, 4, 4, 4, 5, 3, 4, 5, 4, 4, 4, 3, 4, 3, 4, 5, 4, 3, 4, 4, 3, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 5, 3, 3, 3, 3, 4, 5, 5, 4, 5, 3, 5, 5, 4, 4, 4, 4, 3, 5, 5, 5, 3, 3, 3, 5, 3, 4, 6, 3, 3, 3, 4, 4, 5, 5, 3, 6, 3, 4, 5, 4, 4, 3, 3, 6, 4, 3, 3, 4, 4, 3, 4, 3, 5, 5, 4, 4, 5, 5, 3, 4, 4, 4, 3, 3, 4, 7, 3, 4, 3, 4, 3, 4, 4, 4, 3, 3, 4, 5, 3, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 4, 4, 3, 4, 5, 6, 3, 4, 4, 4, 5, 5, 4, 4, 4, 5, 4, 5, 5, 4, 3, 4, 5, 4, 5, 4, 5, 3, 4, 4, 4, 5, 5, 4, 5, 4, 4, 5, 3, 4, 3, 4, 4, 4, 5, 4, 5, 6, 4, 4, 5, 4, 5, 4, 4, 4, 5, 5, 5, 5, 5, 5, 4, 3, 4, 3, 3, 4, 5, 5, 4, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 3, 3, 4, 4, 4, 4, 4, 5, 3, 4, 4, 4, 4, 5, 5, 5, 6, 4, 4, 4, 4, 5, 4, 5, 4, 4, 5, 3, 4, 5, 4, 4, 4, 5, 4, 5, 5, 4, 3, 3, 3, 5, 4, 4, 3, 4, 4, 4, 5, 5, 5, 5, 4, 5, 4, 5, 5, 4, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 4, 5, 4, 5, 4, 6, 5, 4, 5, 4, 6, 4, 6, 5, 5, 5, 4, 5, 4, 5, 5, 5, 4, 4, 4, 4, 5, 5, 4, 4, 5, 4, 4, 5, 4, 4, 4, 5, 5, 5, 5, 5, 4, 5, 4, 6, 5, 4, 4, 5, 5, 5, 5, 5, 5, 5, 4, 4, 5, 4, 4, 4, 5, 4, 5, 3, 5, 5, 5, 5, 5, 6, 5, 4, 4, 4, 5, 5, 5, 4, 5, 4, 4, 5, 4, 5, 5, 5, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 5, 5, 5, 4, 5, 5, 4, 4, 4, 4, 5, 5, 5, 2, 4, 4, 4, 5, 4, 6, 3, 3, 3, 4, 5, 6, 6, 3, 4, 4, 4, 5, 6, 2, 4, 5, 4, 4, 5, 6, 2, 6, 4, 4, 4, 4, 2, 3, 4, 4, 5, 5, 6, 3, 3, 5, 4, 5, 3, 4, 4, 5, 4, 4, 7, 3, 3, 4, 5, 4, 4, 5, 4, 5, 5, 5, 4, 4, 4, 5, 5, 6, 6, 4, 5, 5, 5, 5, 6, 6, 5, 6, 4, 5, 5, 6, 6, 3, 4, 5, 4, 5, 4, 7, 2, 4, 3, 4, 5, 6, 2, 6, 4, 3, 4, 5, 2, 3, 4, 4, 5, 3, 3, 3, 5, 4, 4, 5, 5, 5, 6, 4, 2, 4, 4, 4, 5, 3, 6, 3, 4, 4, 4, 5, 3, 4, 6, 4, 5, 5, 4, 6, 4, 5, 5, 5, 5, 4, 5, 5, 5, 4, 3, 6, 4, 4, 5, 5, 5, 4, 6, 4, 4, 4, 5, 4, 6, 5, 4, 5, 4, 5, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 3, 4, 3, 4, 5, 6, 6, 3, 6, 5, 6, 5, 5, 6, 5, 6, 4, 3, 4, 5, 3, 6, 6, 5, 5, 4, 3, 5, 4, 5, 5, 3, 5, 3, 4, 4, 5, 4, 5, 5, 5, 7, 3, 6, 5, 5, 5, 4, 4, 5, 4, 4, 4, 5, 4, 4, 5, 5, 6, 3, 3, 6, 3, 4, 6, 5, 4, 4, 5, 5, 4, 4, 5, 5, 5, 5, 6, 4, 4, 5, 5, 5, 5, 6, 5, 4, 5, 5, 5, 6, 3, 4, 2, 3, 4, 5, 6, 3, 6, 3, 5, 4, 4, 5, 3, 6, 6, 6, 5, 5, 5, 7, 7, 4, 4, 3, 4, 4, 4, 5, 4, 4, 4, 3, 6, 5, 4, 4, 4, 5, 5, 5, 3, 6, 6, 3, 3, 3, 4, 4, 4, 4, 4, 4, 2, 5, 3, 4, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 5, 4, 3, 4, 3, 4, 4, 5, 3, 4, 4, 4, 4, 4, 4, 3, 5, 4, 4, 3, 3, 5, 2, 4, 6, 4, 5, 4, 4, 4, 4, 2, 4, 2, 5, 2, 5, 4, 4, 3, 5, 4, 5, 2, 4, 3, 5, 5, 5, 4, 4, 4, 4, 5, 5, 5, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 5, 3, 3, 3, 3, 5, 5, 5, 3, 3, 3, 4, 5, 5, 4, 3, 5, 4, 4, 5, 5, 5, 3, 3, 6, 4, 3, 3, 3, 3, 3, 4, 4, 4, 5, 4, 3, 3, 3, 3, 4, 4, 4, 3, 3, 3, 5, 3, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 3, 4, 3, 4, 5, 4, 4, 4, 5, 4, 5, 4, 4, 3, 4, 3, 4, 4, 5, 4, 4, 6, 4, 5, 4, 4, 4, 4, 5, 4, 3, 5, 4, 5, 5, 5, 4, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 4, 4, 4, 5, 5, 5, 4, 4, 3, 4, 4, 4, 3, 3, 5, 5, 5, 5, 4, 4, 4, 4, 4, 5, 5, 5, 5, 3, 3, 3, 4, 5, 6, 6, 3, 4, 3, 4, 5, 6, 3, 6, 4, 3, 4, 5, 2, 2, 4, 4, 6, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 4, 2, 4, 5, 4, 5, 4, 6, 6, 5, 5, 4, 3, 5, 4, 5, 5, 3, 6, 3, 4, 4, 4, 4, 5, 5, 5, 7, 3, 6, 4, 5, 4, 3, 4, 5, 6, 6, 3, 5, 5, 5, 4, 4, 4, 5, 5, 4, 1, 6, 6, 3, 3, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 3]

avgMaxOfCounts = 4.226315789473684

allEntropyOfCounts = [5, 4, 4, 3, 7, 4, 3, 4, 3, 4, 6, 4, 3, 5, 4, 3, 5, 5, 4, 3, 4, 6, 5, 5, 5, 4, 5, 5, 5, 5, 5, 5, 4, 4, 6, 5, 5, 5, 6, 5, 4, 3, 4, 3, 5, 5, 5, 3, 4, 4, 4, 6, 5, 5, 5, 5, 5, 4, 5, 5, 4, 5, 5, 6, 4, 5, 4, 4, 6, 5, 5, 5, 4, 5, 5, 6, 4, 5, 5, 5, 6, 4, 6, 4, 5, 6, 4, 5, 4, 6, 5, 5, 5, 4, 5, 5, 5, 6, 4, 4, 5, 4, 5, 5, 4, 3, 3, 5, 3, 5, 5, 5, 4, 4, 5, 5, 5, 5, 5, 5, 4, 4, 4, 5, 4, 6, 5, 6, 5, 6, 5, 5, 6, 5, 6, 5, 5, 5, 4, 5, 4, 4, 5, 5, 5, 6, 5, 5, 5, 5, 6, 5, 6, 6, 5, 5, 4, 5, 5, 7, 5, 6, 5, 4, 5, 5, 7, 7, 5, 4, 5, 4, 4, 5, 5, 5, 4, 5, 4, 4, 5, 5, 6, 6, 5, 5, 5, 7, 6, 6, 2, 4, 5, 4, 4, 4, 4, 4, 5, 4, 4, 5, 5, 4, 4, 5, 4, 4, 4, 3, 3, 4, 5, 3, 4, 5, 4, 4, 3, 4, 3, 4, 5, 4, 3, 4, 4, 5, 5, 4, 4, 4, 4, 4, 3, 5, 5, 4, 4, 5, 4, 4, 3, 5, 4, 4, 5, 4, 4, 6, 5, 4, 3, 5, 3, 4, 3, 4, 4, 4, 5, 4, 4, 4, 5, 6, 4, 4, 5, 4, 3, 5, 3, 4, 4, 4, 5, 4, 5, 3, 5, 3, 5, 4, 4, 4, 5, 5, 4, 5, 4, 5, 5, 5, 6, 3, 3, 4, 4, 5, 5, 5, 4, 3, 4, 3, 5, 4, 4, 5, 4, 3, 5, 5, 5, 5, 5, 4, 5, 5, 5, 5, 4, 5, 5, 4, 5, 5, 4, 4, 6, 5, 5, 3, 5, 6, 5, 6, 6, 5, 3, 5, 5, 4, 3, 3, 5, 4, 5, 5, 5, 3, 5, 3, 4, 4, 4, 4, 6, 5, 5, 5, 4, 2, 5, 3, 4, 3, 4, 4, 4, 3, 2, 5, 4, 4, 3, 4, 5, 3, 6, 3, 5, 4, 4, 3, 3, 4, 5, 4, 4, 4, 3, 4, 3, 6, 3, 5, 3, 4, 4, 3, 4, 4, 5, 3, 4, 3, 4, 5, 5, 4, 3, 4, 4, 4, 5, 3, 4, 3, 4, 4, 4, 5, 4, 4, 5, 5, 4, 4, 5, 4, 4, 5, 6, 5, 5, 4, 5, 3, 3, 4, 4, 4, 4, 4, 3, 4, 4, 5, 4, 5, 5, 4, 5, 5, 5, 5, 5, 4, 3, 3, 4, 4, 5, 4, 4, 3, 4, 4, 4, 5, 6, 5, 4, 4, 4, 4, 4, 5, 5, 4, 3, 5, 4, 4, 5, 4, 5, 3, 5, 5, 4, 5, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 5, 5, 5, 3, 3, 4, 4, 4, 4, 5, 4, 5, 5, 5, 5, 5, 3, 4, 5, 5, 5, 4, 4, 5, 4, 2, 6, 5, 3, 4, 4, 3, 3, 5, 3, 2, 4, 3, 3, 5, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 2, 4, 5, 3, 3, 5, 5, 5, 4, 4, 5, 4, 5, 6, 5, 3, 4, 4, 3, 3, 4, 4, 3, 4, 5, 3, 3, 4, 5, 4, 2, 3, 3, 5, 4, 4, 4, 4, 4, 4, 4, 4, 3, 5, 4, 6, 5, 4, 4, 4, 5, 5, 5, 5, 5, 3, 4, 3, 5, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 3, 3, 5, 3, 3, 3, 4, 5, 5, 3, 4, 4, 4, 3, 4, 5, 2, 2, 5, 4, 4, 4, 5, 5, 2, 5, 4, 4, 3, 3, 4, 3, 5, 4, 3, 3, 3, 4, 3, 5, 4, 3, 4, 4, 3, 3, 6, 5, 3, 3, 4, 3, 4, 3, 5, 4, 5, 5, 6, 4, 4, 4, 5, 5, 6, 6, 4, 4, 4, 4, 5, 6, 5, 5, 4, 4, 5, 5, 5, 4, 3, 3, 4, 5, 6, 4, 4, 3, 3, 5, 3, 4, 6, 6, 5, 5, 4, 3, 4, 3, 4, 5, 4, 5, 5, 4, 4, 4, 3, 5, 4, 4, 4, 4, 4, 3, 6, 5, 5, 4, 4, 3, 4, 4, 5, 5, 4, 5, 5, 5, 5, 3, 4, 4, 5, 4, 3, 3, 4, 3, 4, 5, 4, 3, 6, 5, 3, 4, 2, 4, 3, 6, 5, 3, 4, 2, 3, 4, 5, 4, 4, 6, 4, 6, 5, 4, 6, 5, 6, 4, 6, 5, 4, 5, 3, 5, 3, 5, 3, 4, 5, 4, 5, 3, 4, 4, 3, 5, 5, 5, 4, 4, 4, 4, 2, 4, 3, 5, 3, 4, 4, 3, 4, 3, 3, 3, 5, 4, 4, 4, 3, 4, 2, 4, 4, 4, 4, 4, 3, 4, 3, 6, 5, 4, 4, 3, 4, 4, 3, 4, 4, 5, 4, 5, 4, 3, 4, 4, 4, 4, 3, 4, 3, 3, 4, 2, 4, 3, 4, 5, 5, 4, 5, 5, 4, 5, 4, 4, 6, 6, 5, 4, 4, 5, 4, 4, 3, 4, 5, 4, 5, 5, 4, 5, 4, 3, 3, 4, 5, 6, 4, 3, 4, 3, 4, 4, 4, 4, 5, 4, 3, 4, 4, 4, 4, 3, 3, 5, 4, 3, 3, 3, 3, 4, 3, 5, 4, 3, 3, 2, 4, 4, 4, 4, 4, 4, 3, 3, 5, 4, 4, 4, 6, 6, 4, 4, 3, 5, 5, 4, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 4, 3, 5, 3, 3, 5, 4, 3, 5, 5, 4, 3, 4, 5, 4, 5, 5, 4, 4, 5, 5, 5, 5, 5, 4, 3, 4, 4, 4, 5, 5, 4, 5, 5, 5, 4, 5, 5, 4, 5, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 4, 5, 5, 6, 6, 4, 5, 3, 3, 5, 5, 5, 3, 4, 4, 4, 4, 4, 6, 6, 5, 5, 5, 4, 7, 6, 5, 3, 4, 4, 3, 5, 5, 4, 4, 5, 4, 3, 3, 3, 3, 3, 4, 3, 4, 6, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 3, 4, 4, 3, 5, 4, 4, 3, 5, 3, 3, 5, 5, 4, 5, 4, 4, 3, 3, 3, 5, 5, 5, 5, 4, 4, 6, 3, 4, 4, 4, 4, 6, 5, 4, 4, 3, 3, 3, 2, 5, 4, 4, 3, 3, 3, 3, 4, 5, 5, 4, 4, 3, 3, 3, 5, 5, 3, 3, 4, 3, 3, 5, 5, 4, 3, 4, 4, 4, 3, 4, 3, 4, 4, 4, 4, 3, 5, 3, 3, 4, 6, 5, 4, 3, 3, 3, 5, 4, 3, 4, 4, 4, 4, 5, 4, 4, 3, 5, 3, 4, 4, 4, 4, 2, 5, 3, 5, 4, 4, 4, 4, 2, 4, 5, 4, 4, 5, 5, 5, 2, 5, 5, 4, 3, 4, 5, 2, 2, 5, 4, 4, 2, 3, 4, 3, 5, 4, 3, 4, 3, 4, 3, 6, 5, 4, 4, 3, 3, 3, 4, 5, 4, 4, 5, 5, 5, 5, 5, 4, 4, 5, 5, 3, 3, 4, 3, 4, 4, 3, 3, 6, 5, 4, 3, 2, 3, 3, 3, 4, 4, 5, 4, 5, 4, 3, 4, 4, 4, 4, 3, 4, 3, 2, 4, 2, 3, 2, 4, 4, 4, 5, 6, 6, 4, 4, 3, 5, 5, 4, 4, 4, 4, 4, 4, 3, 4, 1, 5, 3, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 4, 4, 3, 4, 4, 3]

avgEntropyOfCounts = 4.20375939849624

randomList :: Int -> Integer -> Integer -> IO [Integer]
randomList n lower upper =
  do
    gen <- getStdGen
    let rs = (randomRs (lower, upper) gen :: [Integer])
    return (take n rs)

main = do
  args <- getArgs -- IO [String]
  --chordIndices <- randomList 10 0 1329
  let chordIndices = [0 .. 1329]
  let n = length chordIndices
  guesses <- guessTestsQuick 0 [allChords !! fromIntegral i | i <- chordIndices]
  let average = sum guesses `floatDiv` n
  let marks = sum [4.3 / fromIntegral guess | guess <- guesses]
  putStrLn (if marks < fromIntegral n then show marks ++ "*" else show marks)
  putStrLn ("average guesses: " ++ show average)
  where
    floatDiv x y = fromIntegral x / fromIntegral y

mainLong = do
  args <- getArgs -- IO [String]
  chordIndices <- randomList 100 0 1329
  guesses <- guessTests [allChords !! fromIntegral i | i <- chordIndices]
  let average = fromIntegral (sum guesses) / fromIntegral (length guesses)
  putStrLn (if average > 4.3 then show average ++ "*" else show average)
